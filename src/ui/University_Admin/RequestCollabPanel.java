/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.University_Admin;

import Model.System.DatabaseConnection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import Model.Collab.RequestCollab;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 *
 * @author shubham
 */
public class RequestCollabPanel extends javax.swing.JPanel {

    DatabaseConnection db = new DatabaseConnection();
    Long uniId;
    //database connection
    /**
     * Creates new form RequestCollabPanel
     */
    public RequestCollabPanel() {
        initComponents();
        getUniversity();
        uniId = 0L;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        uniName = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        expName = new javax.swing.JComboBox<>();
        reqCollabBtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        collabReason = new javax.swing.JTextArea();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(25, 118, 211));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Request Collabration");

        jLabel3.setFont(new java.awt.Font("Verdana", 0, 15)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(25, 118, 211));
        jLabel3.setText("University Name :");

        uniName.setBackground(new java.awt.Color(25, 118, 211));
        uniName.setFont(new java.awt.Font("Verdana", 0, 15)); // NOI18N
        uniName.setForeground(new java.awt.Color(255, 255, 255));
        uniName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uniNameActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Verdana", 0, 15)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(25, 118, 211));
        jLabel4.setText("Experiment Name :");

        expName.setBackground(new java.awt.Color(25, 118, 211));
        expName.setFont(new java.awt.Font("Verdana", 0, 15)); // NOI18N
        expName.setForeground(new java.awt.Color(255, 255, 255));

        reqCollabBtn.setBackground(new java.awt.Color(25, 118, 211));
        reqCollabBtn.setFont(new java.awt.Font("Verdana", 1, 15)); // NOI18N
        reqCollabBtn.setForeground(new java.awt.Color(255, 255, 255));
        reqCollabBtn.setText("Request");
        reqCollabBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reqCollabBtnActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Verdana", 0, 15)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(25, 118, 211));
        jLabel5.setText("Reason for Collabration :");

        collabReason.setColumns(20);
        collabReason.setRows(5);
        jScrollPane1.setViewportView(collabReason);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(150, 150, 150)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(68, 68, 68))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel5)
                                .addGap(38, 38, 38)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(expName, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(uniName, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(316, 316, 316)
                        .addComponent(reqCollabBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(199, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {expName, uniName});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(uniName, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(expName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(jLabel5)))
                .addGap(39, 39, 39)
                .addComponent(reqCollabBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(212, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {expName, uniName});

    }// </editor-fold>//GEN-END:initComponents

    private void uniNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uniNameActionPerformed
        // TODO add your handling code here:
        String uName = (String) uniName.getSelectedItem();
        fetchExp(uName);
    }//GEN-LAST:event_uniNameActionPerformed

    private void reqCollabBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reqCollabBtnActionPerformed
        // TODO add your handling code here:
        if (uniName.getItemCount() < 0) {
            JOptionPane.showMessageDialog(this, "Select Univeristy!");
            return;
        }

        if (expName.getItemCount() < 0) {
            JOptionPane.showMessageDialog(this, "Select Experiment Name!");
            return;
        }

        if (collabReason.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Enter Collab Reason!");
            return;
        }

        Connection dbConn = null;
        PreparedStatement sqlStatement = null;

        Long collabId = (long) (Math.random() * (9999 - 1) + 1);
        String sqlQuery = "INSERT INTO project.request_collab VALUES  (?, ?, ?, ?, ?, ?, ?);";

        Long toUniID = getToUniId(expName.getSelectedItem().toString());
        //Long fromUniID = getFromUniId(123L);

        RequestCollab req = new RequestCollab();
        req.setCollabId(collabId);
        req.setUniIdToReq(toUniID);
        req.setUniIdFromReq(uniId);
        req.setApproval("no");
        req.setExpName(expName.getSelectedItem().toString());
        req.setUniversityName(uniName.getSelectedItem().toString());
        req.setReason(collabReason.getText());
        
        try {
            dbConn = db.getConnection();
            if (dbConn != null) {
                dbConn.setAutoCommit(false);
                sqlStatement = dbConn.prepareStatement(sqlQuery);
                sqlStatement.setLong(1, req.getCollabId());
                sqlStatement.setLong(2, req.getUniIdToReq());
                sqlStatement.setLong(3, req.getUniIdFromReq());
                sqlStatement.setString(4, req.getUniversityName());
                sqlStatement.setString(5, req.getExpName());
                sqlStatement.setString(6, req.getReason());
                sqlStatement.setString(7, req.getApproval());

                if (sqlStatement.executeUpdate() > 0) {
                    JOptionPane.showMessageDialog(this, "Request for Collaboration");
                    dbConn.commit();
                } else {
                    System.out.println("Failed to create request");
                    JOptionPane.showMessageDialog(this, "Failed to create request");
                    dbConn.rollback();
                }
            } else {
                System.out.println("DB connection not connected");
            }
        } catch (SQLException sqlExp) {
            //rollback the connection
            sqlExp.printStackTrace();
        } catch (Exception exp) {
            exp.printStackTrace();

        } finally {
            if (sqlStatement != null) {
                try {
                    if (!sqlStatement.isClosed()) {
                        sqlStatement.close();
                    }
                } catch (SQLException err) {
                    err.printStackTrace();

                }
            }
            if (dbConn != null) {
                try {
                    if (!dbConn.isClosed()) {
                        db.closeConnection(dbConn);
                    }
                } catch (SQLException err) {
                    err.printStackTrace();

                }
            }
        }
    }//GEN-LAST:event_reqCollabBtnActionPerformed

    private void populateComboBox(ResultSet dbResult) throws SQLException {
        do {
            uniName.addItem(dbResult.getString((1)));
        } while (dbResult.next());
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea collabReason;
    private javax.swing.JComboBox<String> expName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton reqCollabBtn;
    private javax.swing.JComboBox<String> uniName;
    // End of variables declaration//GEN-END:variables

    private void getUniversity() {
        Connection dbConn = null;
        ResultSet dbResult = null;
        PreparedStatement sqlStatement = null;
        String sqlQuery = "SELECT name FROM project.EnterpriseList WHERE category = 'University';";
        try {
            dbConn = db.getConnection();
            if (dbConn != null) {
                sqlStatement = dbConn.prepareStatement(sqlQuery);
                dbResult = sqlStatement.executeQuery();
                if (!dbResult.next()) {
                    System.out.println("Result set is null!");
                } else {
                    populateComboBox(dbResult);
                }
            } else {
                System.out.println("DB connection not connected");
            }
        } catch (SQLException sqlExp) {
            //rollback the connection
            sqlExp.printStackTrace();
        } catch (Exception exp) {
            exp.printStackTrace();

        } finally {
            if (sqlStatement != null) {
                try {
                    if (!sqlStatement.isClosed()) {
                        sqlStatement.close();
                    }
                } catch (SQLException err) {
                    err.printStackTrace();

                }
            }
            if (dbConn != null) {
                try {
                    if (!dbConn.isClosed()) {
                        db.closeConnection(dbConn);
                    }
                } catch (SQLException err) {
                    err.printStackTrace();

                }
            }
        }
    }

    private void fetchExp(String uName) {
        Connection dbConn = null;
        ResultSet dbResult = null;
        PreparedStatement sqlStatement = null;
        String sqlQuery = "SELECT Experiments.experimentName\n"
                + "FROM EnterpriseList, ResearcherList, Experiments\n"
                + "	WHERE EnterpriseList.name =?\n"
                + "   AND EnterpriseList.id = ResearcherList.organizationid\n"
                + "		AND ResearcherList.id = Experiments.researcherId;";
        try {
            dbConn = db.getConnection();
            if (dbConn != null) {
                sqlStatement = dbConn.prepareStatement(sqlQuery);
                sqlStatement.setString(1, uName);
                dbResult = sqlStatement.executeQuery();
                if (!dbResult.next()) {
                    System.out.println("Result set is null!");
                } else {
                    populateExp(dbResult);
                }
            } else {
                System.out.println("DB connection not connected");
            }
        } catch (SQLException sqlExp) {
            //rollback the connection
            sqlExp.printStackTrace();
        } catch (Exception exp) {
            exp.printStackTrace();

        } finally {
            if (sqlStatement != null) {
                try {
                    if (!sqlStatement.isClosed()) {
                        sqlStatement.close();
                    }
                } catch (SQLException err) {
                    err.printStackTrace();

                }
            }
            if (dbConn != null) {
                try {
                    if (!dbConn.isClosed()) {
                        db.closeConnection(dbConn);
                    }
                } catch (SQLException err) {
                    err.printStackTrace();

                }
            }
        }
    }

    private void populateExp(ResultSet dbResult) throws SQLException {
        expName.removeAllItems();
        do {
            expName.addItem(dbResult.getString((1)));
        } while (dbResult.next());
    }

    private Long getToUniId(String toString) {
        Connection dbConn = null;
        Long toUniId = 0L;
        ResultSet dbResult = null;
        PreparedStatement sqlStatement = null;
        String sqlQuery = "SELECT EnterpriseList\n"
                + "        .id FROM EnterpriseList, ResearcherList\n"
                + "        , Experiments WHERE Experiments.experimentName = ?\n"
                + "        AND Experiments\n"
                + "        .researcherId = ResearcherList.id\n"
                + "        AND ResearcherList\n"
                + "        .organizationid = EnterpriseList.id";
        try {
            dbConn = db.getConnection();
            if (dbConn != null) {
                sqlStatement = dbConn.prepareStatement(sqlQuery);
                sqlStatement.setString(1, toString);
                dbResult = sqlStatement.executeQuery();
                if (!dbResult.next()) {
                    System.out.println("Result set is null!");
                } else {
                    toUniId = dbResult.getLong(1);
                }
            } else {
                System.out.println("DB connection not connected");
            }
        } catch (SQLException sqlExp) {
            //rollback the connection
            sqlExp.printStackTrace();
        } catch (Exception exp) {
            exp.printStackTrace();

        } finally {
            if (sqlStatement != null) {
                try {
                    if (!sqlStatement.isClosed()) {
                        sqlStatement.close();
                    }
                } catch (SQLException err) {
                    err.printStackTrace();

                }
            }
            if (dbConn != null) {
                try {
                    if (!dbConn.isClosed()) {
                        db.closeConnection(dbConn);
                    }
                } catch (SQLException err) {
                    err.printStackTrace();

                }
            }
        }
        return toUniId;
    }

    private Long getFromUniId(Long l) {
        Connection dbConn = null;
        ResultSet dbResult = null;
        PreparedStatement sqlStatement = null;
        String sqlQuery = "";
        try {
            dbConn = db.getConnection();
            if (dbConn != null) {
                sqlStatement = dbConn.prepareStatement(sqlQuery);
                sqlStatement.setString(1, "");
                dbResult = sqlStatement.executeQuery();
                if (!dbResult.next()) {
                    System.out.println("Result set is null!");
                } else {
                    
                }
            } else {
                System.out.println("DB connection not connected");
            }
        } catch (SQLException sqlExp) {
            //rollback the connection
            sqlExp.printStackTrace();
        } catch (Exception exp) {
            exp.printStackTrace();

        } finally {
            if (sqlStatement != null) {
                try {
                    if (!sqlStatement.isClosed()) {
                        sqlStatement.close();
                    }
                } catch (SQLException err) {
                    err.printStackTrace();

                }
            }
            if (dbConn != null) {
                try {
                    if (!dbConn.isClosed()) {
                        db.closeConnection(dbConn);
                    }
                } catch (SQLException err) {
                    err.printStackTrace();

                }
            }
        }
        return 0L;
    }
}
