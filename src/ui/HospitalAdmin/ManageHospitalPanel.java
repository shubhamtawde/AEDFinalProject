/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.HospitalAdmin;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Credentials.Credentials;
import model.Doctor.Doctor;
import model.Hospital.Hospital;
import model.System.DatabaseConnection;

/**
 *
 * @author shubham
 */
public class ManageHospitalPanel extends javax.swing.JPanel {

    DatabaseConnection db = new DatabaseConnection();

    /**
     * Creates new form ManageHospitalPanel
     */
    public ManageHospitalPanel() {
        initComponents();
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        hospId = new javax.swing.JTextField();
        hospName = new javax.swing.JTextField();
        hospCity = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        hospitalTable = new javax.swing.JTable();
        viewHospBtn = new javax.swing.JButton();
        updHospBtn = new javax.swing.JButton();
        deleteHospBtn = new javax.swing.JButton();

        jLabel1.setText("Manage Hospital Panel");

        jLabel2.setText("Hospital ID");

        jLabel3.setText("Hospital Name");

        jLabel4.setText("Hospital City");

        hospId.setEditable(false);

        hospitalTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Hospital Name", "Hospital ID", "Hospital City"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(hospitalTable);

        viewHospBtn.setText("View");
        viewHospBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewHospBtnActionPerformed(evt);
            }
        });

        updHospBtn.setText("Update Hospital");
        updHospBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updHospBtnActionPerformed(evt);
            }
        });

        deleteHospBtn.setText("Delete Hospital");
        deleteHospBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteHospBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 765, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(hospCity, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hospId, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hospName, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(335, 335, 335)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(330, 330, 330)
                        .addComponent(viewHospBtn)
                        .addGap(89, 89, 89)))
                .addContainerGap(21, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(updHospBtn)
                .addGap(86, 86, 86)
                .addComponent(deleteHospBtn)
                .addGap(282, 282, 282))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewHospBtn)
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(hospId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addComponent(jLabel3))
                    .addComponent(hospName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(hospCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updHospBtn)
                    .addComponent(deleteHospBtn))
                .addGap(33, 33, 33))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void viewHospBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewHospBtnActionPerformed
        // TODO add your handling code here:
        int rowIndex = hospitalTable.getSelectedRow();

        if (rowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select an employee to update!");
            return;
        }

        if (hospitalTable.getSelectedRowCount() > 1) {
            JOptionPane.showMessageDialog(this, "Please select only 1 employee to update!");
            return;
        }

        DefaultTableModel tableModel = (DefaultTableModel) hospitalTable.getModel();
        Hospital toUpdHospital = (Hospital) tableModel.getValueAt(rowIndex, 0);

        showHospital(toUpdHospital);
    }//GEN-LAST:event_viewHospBtnActionPerformed

    private void updHospBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updHospBtnActionPerformed
        // TODO add your handling code here:
        if (hospName.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Enter valid input!");
            return;
        }

        if (Pattern.matches("^[0-9]*$", hospName.getText())) {
            JOptionPane.showMessageDialog(this, "Name cannot contain numbers!");
            return;
        }

        if (hospCity.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Enter valid input!");
            return;
        }

        if (Pattern.matches("^[0-9]*$", hospCity.getText())) {
            JOptionPane.showMessageDialog(this, "Name cannot contain numbers!");
            return;
        }

        Connection dbConn = null;
        PreparedStatement docStatement = null;
        String updQuery = "UPDATE project.hospital SET hospitalName = ?, hospitalCity = ? WHERE hospitalId = ?;";

        try {
            dbConn = db.getConnection();
            if (dbConn != null) {
                Hospital hosp = new Hospital();
                hosp.setHospitalId(Long.valueOf(hospId.getText()));
                hosp.setHospitalName(hospName.getText());
                hosp.setHospitalCity(hospCity.getText());
                dbConn.setAutoCommit(false);
                docStatement = dbConn.prepareStatement(updQuery);
                docStatement.setString(1, hosp.getHospitalName());
                docStatement.setString(2, hosp.getHospitalCity());
                docStatement.setLong(3, hosp.getHospitalId());

                if (docStatement.executeUpdate() > 0) {
                    System.out.println("Updated Hospital Successfully!");
                    JOptionPane.showMessageDialog(this, "Update Hospital Successfully!");
                    dbConn.commit();
                } else {
                    System.out.println("Failed to update Hospital");
                    JOptionPane.showMessageDialog(this, "Failed to update Hospital!");
                    dbConn.rollback();
                }
            } else {
                System.out.println("DB connection not connected");
            }
        } catch (SQLException sqlExp) {
            //rollback the connection
            sqlExp.printStackTrace();
        } catch (Exception exp) {
            exp.printStackTrace();

        } finally {
            if (docStatement != null) {
                try {
                    if (!docStatement.isClosed()) {
                        docStatement.close();
                    }
                } catch (SQLException err) {
                    err.printStackTrace();

                }
            }
            if (dbConn != null) {
                try {
                    if (!dbConn.isClosed()) {
                        db.closeConnection(dbConn);
                    }
                } catch (SQLException err) {
                    err.printStackTrace();
                }
            }
        }
        clearFields();
        populateTable();
    }//GEN-LAST:event_updHospBtnActionPerformed

    private void deleteHospBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteHospBtnActionPerformed
        // TODO add your handling code here:
        int rowIndex = hospitalTable.getSelectedRow();

        if (rowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a hospital to delete!");
            return;
        }

        if (hospitalTable.getSelectedRowCount() > 1) {
            JOptionPane.showMessageDialog(this, "Please select only 1 hospital to delete!");
            return;
        }

        DefaultTableModel tableModel = (DefaultTableModel) hospitalTable.getModel();
        Hospital toDelHospital = (Hospital) tableModel.getValueAt(rowIndex, 0);

        int result = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this Hospital;?", "Delete Hospital Confirmation", JOptionPane.YES_NO_OPTION);
        if (result == JOptionPane.YES_OPTION) {
            //delete employee
            deleteHospital(toDelHospital);

            JOptionPane.showMessageDialog(this, "Hospital Deleted Successfully!");
            //populate table to refresh the deleted record
            populateTable();
        }

    }//GEN-LAST:event_deleteHospBtnActionPerformed

    private void populateTable() {
        Connection dbConn = null;
        ResultSet dbResult = null;
        PreparedStatement sqlStatement = null;
        Long hospitalId = (long) (Math.random() * (9999 - 1) + 1);
        String sqlQuery = "SELECT * FROM project.hospital;";
        try {
            dbConn = db.getConnection();
            if (dbConn != null) {
                sqlStatement = dbConn.prepareStatement(sqlQuery);
                dbResult = sqlStatement.executeQuery();
                System.out.println(dbResult);
                if (!dbResult.next()) {
                    System.out.println("Result set is null!");
                } else {
                    fillTable(dbResult);
                }
            } else {
                System.out.println("DB connection not connected");
            }
        } catch (SQLException sqlExp) {
            //rollback the connection
            sqlExp.printStackTrace();
        } catch (Exception exp) {
            exp.printStackTrace();

        } finally {
            if (sqlStatement != null) {
                try {
                    if (!sqlStatement.isClosed()) {
                        sqlStatement.close();
                    }
                } catch (SQLException err) {
                    err.printStackTrace();

                }
            }
            if (dbConn != null) {
                try {
                    if (!dbConn.isClosed()) {
                        db.closeConnection(dbConn);
                    }
                } catch (SQLException err) {
                    err.printStackTrace();

                }
            }
        }
    }

    private void fillTable(ResultSet dbResult) throws SQLException {
        DefaultTableModel tableModel = (DefaultTableModel) hospitalTable.getModel();

        tableModel.setRowCount(0);

        do {
            Hospital hosp = new Hospital();
            hosp.setHospitalId(dbResult.getLong(1));
            hosp.setHospitalName(dbResult.getString(2));
            hosp.setHospitalCity(dbResult.getString(3));
            Object[] tblRow = new Object[3];
            tblRow[0] = hosp;
            tblRow[1] = hosp.getHospitalId();
            tblRow[2] = hosp.getHospitalCity();
            tableModel.addRow(tblRow);
        } while (dbResult.next());
    }

    private void showHospital(Hospital toUpdHospital) {
        hospId.setText(String.valueOf(toUpdHospital.getHospitalId()));
        hospName.setText(toUpdHospital.getHospitalName());
        hospCity.setText(toUpdHospital.getHospitalCity());
    }

    private void clearFields() {
        hospId.setText("");
        hospName.setText("");
        hospCity.setText("");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteHospBtn;
    private javax.swing.JTextField hospCity;
    private javax.swing.JTextField hospId;
    private javax.swing.JTextField hospName;
    private javax.swing.JTable hospitalTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton updHospBtn;
    private javax.swing.JButton viewHospBtn;
    // End of variables declaration//GEN-END:variables

    private void deleteHospital(Hospital toDelHospital) {

        Connection dbConn = null;
        PreparedStatement hospStatement = null;

        String hospQuery = "DELETE FROM book_info WHERE book_id =  ?;";

        Hospital hosp = new Hospital();
        hosp.setHospitalId(Long.valueOf(hospId.getText()));
        hosp.setHospitalName(hospName.getText());
        hosp.setHospitalCity(hospCity.getText());


        try {
            dbConn = db.getConnection();
            if (dbConn != null) {
                dbConn.setAutoCommit(false);
                hospStatement = dbConn.prepareStatement(hospQuery);
                hospStatement.setLong(1, hosp.getHospitalId());
                hospStatement.setString(2, hosp.getHospitalName());
                hospStatement.setString(3, hosp.getHospitalCity());

                
                if (hospStatement.executeUpdate() > 0) {
                    System.out.println("Deleted Hospital Successfully!");
                    JOptionPane.showMessageDialog(this, "Deleted Hospital Successfully!");
                    dbConn.commit();
                } else {
                    System.out.println("Failed to delete hospital");
                    JOptionPane.showMessageDialog(this, "Failed to delete hospital!");
                    dbConn.rollback();
                }
            } else {
                System.out.println("DB connection not connected");
            }
        } catch (SQLException sqlExp) {
            //rollback the connection
            sqlExp.printStackTrace();
        } catch (Exception exp) {
            exp.printStackTrace();

        } finally {
            if (hospStatement != null) {
                try {
                    if (!hospStatement.isClosed()) {
                        hospStatement.close();
                    }
                } catch (SQLException err) {
                    err.printStackTrace();

                }
            }
            if (dbConn != null) {
                try {
                    if (!dbConn.isClosed()) {
                        db.closeConnection(dbConn);
                    }
                } catch (SQLException err) {
                    err.printStackTrace();

                }
            }
        }
        populateTable();
    }
}
