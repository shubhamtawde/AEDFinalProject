/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ui.Laboratories;

import Model.System.DatabaseConnection;
import Model.TestResult.TestResult;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import loginform.MainFrame;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 *
 * @author vidhisejpal
 */
public class TesterHomePanel extends javax.swing.JFrame {

    /**
     * Creates new form TesterHomePanel
     */
    Connection dbConn = null;
    PreparedStatement sqlStatement = null;
    String photo;
    Logger logger = LogManager.getLogger(TesterPanel.class);

    public TesterHomePanel() {
        initComponents();
        findTableData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TesterPanelTable = new javax.swing.JTable();
        postButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        strainDetected = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        sugarDetected = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        vitaminLevel = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        remarks = new javax.swing.JTextField();
        viewTestButton = new javax.swing.JButton();
        UploadImageBtn = new javax.swing.JButton();
        viewPhotoButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        logoutButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        TesterPanelTable.setBackground(new java.awt.Color(25, 118, 211));
        TesterPanelTable.setFont(new java.awt.Font("Verdana", 0, 13)); // NOI18N
        TesterPanelTable.setForeground(new java.awt.Color(255, 255, 255));
        TesterPanelTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Result Id ", "Doctor Id", "Doctor Name", "Test Name", "Patient Name", "Date", "Sample", "Strain Detected", "Sugar Detected", "Vitamin Level", "Remarks"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TesterPanelTable);

        postButton.setBackground(new java.awt.Color(25, 118, 211));
        postButton.setFont(new java.awt.Font("Verdana", 1, 15)); // NOI18N
        postButton.setForeground(new java.awt.Color(255, 255, 255));
        postButton.setText("Post Test Results");
        postButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Verdana", 0, 15)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(25, 118, 211));
        jLabel1.setText("Sample  :");

        jLabel2.setFont(new java.awt.Font("Verdana", 0, 15)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(25, 118, 211));
        jLabel2.setText("Strain Detected : ");

        jLabel3.setFont(new java.awt.Font("Verdana", 0, 15)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(25, 118, 211));
        jLabel3.setText("Sugar Detected :");

        jLabel4.setFont(new java.awt.Font("Verdana", 0, 15)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(25, 118, 211));
        jLabel4.setText("Vitamin Level : ");

        jLabel5.setFont(new java.awt.Font("Verdana", 0, 15)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(25, 118, 211));
        jLabel5.setText("Remarks :");

        viewTestButton.setBackground(new java.awt.Color(25, 118, 211));
        viewTestButton.setFont(new java.awt.Font("Verdana", 1, 15)); // NOI18N
        viewTestButton.setForeground(new java.awt.Color(255, 255, 255));
        viewTestButton.setText("View Test Result");
        viewTestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewTestButtonActionPerformed(evt);
            }
        });

        UploadImageBtn.setText("Upload Image");
        UploadImageBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UploadImageBtnActionPerformed(evt);
            }
        });

        viewPhotoButton.setBackground(new java.awt.Color(25, 118, 211));
        viewPhotoButton.setFont(new java.awt.Font("Verdana", 1, 15)); // NOI18N
        viewPhotoButton.setForeground(new java.awt.Color(255, 255, 255));
        viewPhotoButton.setText("View Sample Post");
        viewPhotoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPhotoButtonActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(25, 118, 211));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Tester Panel");

        logoutButton2.setFont(new java.awt.Font("Verdana", 0, 15)); // NOI18N
        logoutButton2.setForeground(new java.awt.Color(25, 118, 211));
        logoutButton2.setText("Logout");
        logoutButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(logoutButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 906, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(134, 134, 134)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(134, 134, 134)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(40, 40, 40))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(viewTestButton, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(72, 72, 72)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(sugarDetected, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(vitaminLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(remarks, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(strainDetected)
                                    .addComponent(UploadImageBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(viewPhotoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(40, 40, 40)
                                .addComponent(postButton)))))
                .addContainerGap(73, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(logoutButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewTestButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(viewPhotoButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(postButton))
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UploadImageBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(strainDetected, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sugarDetected, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vitaminLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(remarks, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1011, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 747, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void postButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postButtonActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = TesterPanelTable.getSelectedRow();

        if (TesterPanelTable.getSelectedRowCount() > 1) {
            JOptionPane.showMessageDialog(null, "Please select only 1 row !", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(null, "Please select 1 row !", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(strainDetected.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Enter valid input!");
            return;
        }
        if(sugarDetected.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Enter valid input!");
            return;
        }
        if(vitaminLevel.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Enter valid input!");
            return;
        }
        if(remarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Enter valid input!");
            return;
        }
        if(UploadImageBtn.getText().trim().equals("Upload Image")) {
            JOptionPane.showMessageDialog(this, "Enter valid sample image!");
            return;
        }
        else {
            DefaultTableModel model = (DefaultTableModel) TesterPanelTable.getModel();
            //Long id= Long.valueOf(TOOL_TIP_TEXT_KEY) model.getValueAt(selectedRowIndex,0);
            String id = String.valueOf(model.getValueAt(selectedRowIndex, 0));
            Long id_long = Long.valueOf(id);
            System.out.println(id);
            DatabaseConnection db = new DatabaseConnection();
            ResultSet dbResult = null;
            try {
                dbConn = db.getConnection();
                if (dbConn != null) {
                    sqlStatement = dbConn.prepareStatement("update TestResult set sample=?,strainDetected=?,sugarDetected=?,vitaminLevel=?,remarks=? where resultId=?;");

                    sqlStatement.setString(1, photo);
                    sqlStatement.setString(2, strainDetected.getText());
                    sqlStatement.setString(3, sugarDetected.getText());
                    sqlStatement.setString(4, vitaminLevel.getText());
                    sqlStatement.setString(5, remarks.getText());
                    sqlStatement.setLong(6, id_long);

                    int result = sqlStatement.executeUpdate();

                    //System.out.println(dbResult.next());
                    //populateTable(dbResult);
                    findTableData();
                    strainDetected.setText("");
                    sugarDetected.setText("");
                    vitaminLevel.setText("");
                    remarks.setText("");
                    JOptionPane.showMessageDialog(this, "Test Result Posted Successfully");

                } else {
                    System.out.println("connection not done");
                }
            } catch (Exception e) {
                System.out.println(e);
                logger.error(e);
            } finally {
                if (sqlStatement != null) {
                    try {
                        if (!sqlStatement.isClosed()) {
                            sqlStatement.close();
                        }

                    } catch (SQLException err) {
                        err.printStackTrace();
                        logger.error(err);

                    }
                }
                if (dbConn != null) {
                    try {
                        if (!dbConn.isClosed()) {
                            db.closeConnection(dbConn);
                        }
                    } catch (SQLException err) {
                        err.printStackTrace();
                        logger.error(err);

                    }
                }
            }
        }
    }//GEN-LAST:event_postButtonActionPerformed

    private void viewTestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewTestButtonActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = TesterPanelTable.getSelectedRow();

        if (TesterPanelTable.getSelectedRowCount() > 1) {
            JOptionPane.showMessageDialog(null, "Please select only 1 row !", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(null, "Please select 1 row !", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        } else {
            DefaultTableModel model = (DefaultTableModel) TesterPanelTable.getModel();
            //Long id= Long.valueOf(TOOL_TIP_TEXT_KEY) model.getValueAt(selectedRowIndex,0);
            String id = String.valueOf(model.getValueAt(selectedRowIndex, 0));
            Long id_long = Long.valueOf(id);
            System.out.println(id);
            DatabaseConnection db = new DatabaseConnection();
            ResultSet dbResult = null;
            TestResult testRes = new TestResult();
            testRes.setResultId(id_long);
            try {
                dbConn = db.getConnection();
                if (dbConn != null) {
                    sqlStatement = dbConn.prepareStatement("select * from TestResult where resultId=?;");
                    sqlStatement.setLong(1, id_long);

                    dbResult = sqlStatement.executeQuery();

                    //System.out.println(dbResult.next());
                    //populateTable(dbResult);
                    while (dbResult.next()) {

                        //                        photo.setText(dbResult.getString(7));
                        if (!dbResult.getString(7).equals("")) {
                            UploadImageBtn.setText(dbResult.getString(7));
                        }
                        testRes.setStrainDetected(dbResult.getString(8));
                        testRes.setSugarDetected(dbResult.getString(9));
                        testRes.setVitaminLevel(dbResult.getString(10));
                        testRes.setRemarks(dbResult.getString(11));
                        strainDetected.setText(testRes.getStrainDetected());
                        sugarDetected.setText(testRes.getSugarDetected());
                        vitaminLevel.setText(testRes.getVitaminLevel());
                        remarks.setText(testRes.getRemarks());

                    }

                } else {
                    System.out.println("connection not done");
                }
            } catch (Exception e) {
                System.out.println(e);
                logger.error(e);
            } finally {
                if (sqlStatement != null) {
                    try {
                        if (!sqlStatement.isClosed()) {
                            sqlStatement.close();
                        }

                    } catch (SQLException err) {
                        err.printStackTrace();
                        logger.error(err);
                    }
                }
                if (dbConn != null) {
                    try {
                        if (!dbConn.isClosed()) {
                            db.closeConnection(dbConn);
                        }
                    } catch (SQLException err) {
                        err.printStackTrace();
                        logger.error(err);
                    }
                }
            }
        }
    }//GEN-LAST:event_viewTestButtonActionPerformed

    private void UploadImageBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UploadImageBtnActionPerformed
        // TODO add your handling code here
        JFileChooser img = new JFileChooser();
        img.setCurrentDirectory(new File(System.getProperty("user.home")));
        FileNameExtensionFilter filter = new FileNameExtensionFilter("*.images", "jpg", "gif", "png");
        img.addChoosableFileFilter(filter);
        int result = img.showSaveDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = img.getSelectedFile();
            UploadImageBtn.setText(selectedFile.getName());
            photo = selectedFile.getPath();
        } //image.setIcon (Resize Image (path));
        else if (result == JFileChooser.CANCEL_OPTION) {
            System.out.println("NO File Selected");
        }
    }//GEN-LAST:event_UploadImageBtnActionPerformed

    private void viewPhotoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewPhotoButtonActionPerformed
        // TODO add your handling code here:
        // view image from popup by taking picture from saved location
        int rowIndex = TesterPanelTable.getSelectedRow();
        if (rowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select an test to view photo!");
            return;
        }
        DefaultTableModel tableModel = (DefaultTableModel) TesterPanelTable.getModel();
        String photo = (String) tableModel.getValueAt(rowIndex, 6);
        if (!photo.equals("")) {
            JDialog viewDialog = new JDialog();
            viewDialog.setSize(500, 500);
            viewDialog.setLocation(400, 300);
            viewDialog.setVisible(true);
            JLabel imageLbl = new JLabel();
            try {
                BufferedImage img = ImageIO.read(new File(photo));
                ImageIcon icon = new ImageIcon(img);
                imageLbl.setIcon(icon);
            } catch (IOException exp) {
                System.out.println("Error occured : " + exp);
            }
            viewDialog.add(imageLbl);
        }
        else {
            JOptionPane.showMessageDialog(this, "Sample is not uploaded, please upload before viewing");
            return;
        }
    }//GEN-LAST:event_viewPhotoButtonActionPerformed

    private void logoutButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButton2ActionPerformed
        // TODO add your handling code here:
        MainFrame m = new MainFrame();
        m.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_logoutButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TesterHomePanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TesterHomePanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TesterHomePanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TesterHomePanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TesterHomePanel().setVisible(true);
            }
        });
    }

    private void findTableData() {
        DatabaseConnection db = new DatabaseConnection();
        ResultSet dbResult = null;
        try {
            dbConn = db.getConnection();
            if (dbConn != null) {
                sqlStatement = dbConn.prepareStatement("select * from TestResult;");

                dbResult = sqlStatement.executeQuery();

                //System.out.println(dbResult.next());
                // System.out.println(dbResult.getLong(1));
                populateTable(dbResult);

            } else {
                System.out.println("connection not done");
            }
        } catch (Exception e) {
            System.out.println(e);
            logger.error(e);
        } finally {
            if (sqlStatement != null) {
                try {
                    if (!sqlStatement.isClosed()) {
                        sqlStatement.close();
                    }

                } catch (SQLException err) {
                    err.printStackTrace();
                    logger.error(err);

                }
            }
            if (dbConn != null) {
                try {
                    if (!dbConn.isClosed()) {
                        db.closeConnection(dbConn);
                    }
                } catch (SQLException err) {
                    err.printStackTrace();
                    logger.error(err);

                }
            }
        }
    }

    private void populateTable(ResultSet dbResult) {
        DefaultTableModel model = (DefaultTableModel) TesterPanelTable.getModel();
        model.setRowCount(0);
        try {
            while (dbResult.next()) {
                Object[] row = new Object[11];
                row[0] = dbResult.getLong(1);
                row[1] = dbResult.getLong(2);
                row[2] = dbResult.getString(3);
                row[3] = dbResult.getString(4);
                row[4] = dbResult.getString(5);
                row[5] = dbResult.getString(6);
                row[6] = dbResult.getString(7);
                row[7] = dbResult.getString(8);
                row[8] = dbResult.getString(9);
                row[9] = dbResult.getString(10);
                row[10] = dbResult.getString(11);
                model.addRow(row);
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TesterPanelTable;
    private javax.swing.JButton UploadImageBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton logoutButton;
    private javax.swing.JButton logoutButton1;
    private javax.swing.JButton logoutButton2;
    private javax.swing.JButton postButton;
    private javax.swing.JTextField remarks;
    private javax.swing.JTextField strainDetected;
    private javax.swing.JTextField sugarDetected;
    private javax.swing.JButton viewPhotoButton;
    private javax.swing.JButton viewTestButton;
    private javax.swing.JTextField vitaminLevel;
    // End of variables declaration//GEN-END:variables
}
